    var puz = [];
    puz[ 0] = [0,0,21,0 ,0];
    puz[ 1] = [21,21,0 ,21,21];
    puz[ 2] = [10,27,27,27,10];
    puz[ 3] = [0 ,27,0 ,17,27];
    puz[ 4] = [15,23,23,24,27];
    puz[ 5] = [0 ,0 ,21,21,14];
    puz[ 6] = [15,17,17,17,15];
    puz[ 7] = [0 ,4 ,10,21,10];
    puz[ 8] = [10,31,14,26,7 ];
    puz[ 9] = [14,14,14,0 ,0 ];
    puz[10] = [21,21,21,21,14];
    puz[11] = [31,10,27,14,10];
    puz[12] = [8 ,20,10,5 ,2 ];
    puz[13] = [0 ,0 ,2 ,2 ,2 ];
    puz[14] = [0 ,2 ,0 ,2 ,0 ];
    puz[15] = [1 ,1 ,1 ,1 ,31];
    puz[16] = [0 ,0 ,4 ,14,31];
    puz[17] = [4 ,10,21,10,4 ];
    puz[18] = [21,0 ,21,0 ,21];
    puz[19] = [0 ,0 ,17,0 ,0 ];
    puz[20] = [30,2 ,14,2 ,2 ];
    puz[21] = [14,17,17,17,14];
    puz[22] = [0 ,0 ,28,12,4 ];
    puz[23] = [0 ,0 ,17,31,18];
    puz[24] = [1 ,3 ,7 ,15,30];
    puz[25] = [17,17,31,17,17];
    puz[26] = [4 ,14,4 ,4 ,4 ];
    puz[27] = [0 ,0 ,28,28,28];
    puz[28] = [0 ,2 ,0 ,0 ,0 ];
    puz[29] = [0 ,0 ,4 ,0 ,0 ];
    puz[30] = [17,19,21,25,17];
    puz[31] = [31,8 ,4 ,2 ,31];
    puz[32] = [8 ,8 ,21,17,25];
    puz[33] = [20,17,17,22,30];
    puz[34] = [24,10,17,21,0 ];
    puz[35] = [4 ,10,17,31,17];
    puz[36] = [0 ,14,14,14,0 ];
    puz[37] = [21,10,21,10,21];
    puz[38] = [10,1 ,3 ,12,10];
    puz[39] = [0 ,0 ,10,0 ,0 ];
    puz[40] = [17,10,4 ,4 ,4 ];
    puz[41] = [7 ,9 ,7 ,9 ,7 ];
    puz[42] = [17,11,7 ,2 ,14];
    puz[43] = [0 ,27,31,4 ,14];
    puz[44] = [14,5 ,28,15,21];
    puz[45] = [4 ,14,31,14,4 ];
    puz[46] = [4 ,31,5 ,18,16];
    puz[47] = [0 ,17,4 ,17,0 ];
    puz[48] = [17,10,4 ,10,17];
    puz[49] = [31,31,31,31,31];
    puz[50] = [27,0 ,27,0 ,27];
    puz[51] = [31,4 ,0 ,4 ,31];
    puz[52] = [31,10,4 ,10,31];
    puz[53] = [10,17,0 ,27,17];
    puz[54] = [4 ,6 ,27,12,4 ];
    puz[55] = [10,31,21,31,10];
    puz[56] = [21,17,27,17,21];
    puz[57] = [0 ,0 ,14,2 ,0 ];
    puz[58] = [16,8 ,4 ,6 ,5 ];
    puz[59] = [0 ,21,17,21,17];
    puz[60] = [31,14,14,14,31];
    puz[61] = [17,10,0 ,10,17];
    puz[62] = [14,10,14,8 ,14];
    puz[63] = [15,9 ,15,7 ,9 ];
    puz[64] = [21,21,21,21,14];
    puz[65] = [14,2 ,14,8 ,14];
    puz[66] = [31,17,21,17,31];
    puz[67] = [21,0 ,21,0 ,21];
    puz[68] = [10,21,14,21,10];
    puz[69] = [21,0 ,0 ,0 ,21];
    puz[70] = [31,29,27,23,31];
    puz[71] = [31,4 ,31,17,17];
    puz[72] = [27,10,27,10,27];
    puz[73] = [4 ,10,31,17,31];
    puz[74] = [17,27,21,17,17];
    puz[75] = [31,21,31,21,31];
    puz[76] = [14,4 ,4 ,4 ,14];
    puz[77] = [14,10,31,14,27];
    puz[78] = [0 ,0 ,4 ,0 ,0 ];
    puz[79] = [17,0 ,4 ,0 ,17];
    puz[80] = [27,27,0 ,27,27];
    puz[81] = [10,0 ,17,14,4 ];
    puz[82] = [21,14,27,14,21];
    puz[83] = [17,19,21,25,17];
    puz[84] = [21,21,27,21,21];
    puz[85] = [4 ,4 ,14,21,21];
    puz[86] = [21,21,21,21,31];
    puz[87] = [0 ,14,14,14,0 ];
    puz[88] = [4 ,10,17,31,17];
    puz[89] = [21,10,21,10,21];
    puz[90] = [17,14,10,14,17];
    puz[91] = [4 ,10,17,10,4 ];
    puz[92] = [21,0 ,10,0 ,21];
    puz[93] = [10,31,10,31,10];
    puz[94] = [31,21,31,29,31];
    puz[95] = [17,10,4 ,10,17];
    puz[96] = [31,4 ,31,4 ,31];
    puz[97] = [31,14,4 ,14,31];
    puz[98] = [4 ,21,31,21,4 ];
    puz[99] = [31,31,31,31,31];

    var msk;
    var moves;
    var posit = [];
    var hnt = [];
    var mode = 0;   //0=normal  1=solving scrambled  2=edit  3=Hint

    var qbit= [1,2,4,8,16,32,64,128];

    function initbrd() {
        for (var i = 0; i <= 6; i++) {
            posit[i] = 0;
            hnt[i] = 0;
        }
        moves = 0;
        showbrd();
        msk = qbit[6] - 2;
    }

    function initpuz(p) {
        if (p) {
            for (var i = 1; i <= 5; i++) {
                posit[i] = 2 * puz[p - 1][i - 1];
                hnt[i] = 0;
            }
            moves = 0;
            mode = 1;
            showbrd();
        }
    }

    var coordsToIndex = function(coords) {
        return (coords.row * 5) + coords.col;
    };

    function flattenedHints(hints) {
        var x, y, flattened = [];
        for (x=1; x<=5; x++) {
            for (y=1; y<=5; y++) {
                if ((hints[y] & qbit[x]) > 0) {
                    flattened.push({x:x, y:y});
                }
            }
        }
        return flattened;
    }

    function draw(y, x) {
    }

    function showbrd() {
    }

    function solvbot(f) {
        // solve board till bottom row. If f set then adjust hnt accordingly
        for (var i = 2; i <= 5; i++) {
            var c = posit[i - 1] & msk;
            posit[i] ^= c ^ (c + c) ^ (c >> 1);
            posit[i + 1] ^= c;
            posit[i - 1] = 0;
            if (f) {
                hnt[i] ^= c;
            }
        }

    }

    function hintson() {
        //Find solution, and put it into hnt array
        //Board remains unchanged.
        //If no solution found, then return false, else return true
        var i, j, c;

        //backup board, and set board to accept hints
        var backup = [];
        for (i = 0; i <= 5; i++) {
            backup[i] = posit[i];
        }
        for (j = 1; j <= 5; j++) {
            hnt[j] = 0;
        }

        //solve board up to last row
        solvbot(1);

        //save bottom row vector
        var aim = posit[5];
        posit[5] = 0;

        //Build up matrix of bottom rows for each possible top light
        var bot = [34, 20, 56, 0, 0];
        var inv = [6, 14, 12, 54, 42];

        //Note rows below l are 0, i.e. push patterns that have no effect.
        //Now try to make aim from non-zero rows
        var m = 0; //current row
        for (var k = 1; k <= 5; k++) {   //current column
            c = qbit[k];
            if (bot[m] & c) {
                if (aim & c) {
                    aim ^= bot[m];
                    //push top buttons as indicated in inv matrix
                    var d = inv[m];
                    hnt[1] ^= d;
                    posit[1] = (posit[1] ^ d ^ (d + d) ^ (d >> 1)) & msk;
                    posit[2] ^= d;
                }
                m++; //move to next row
            }
        }
        //Error if aim has not been attained
        if (aim & msk) {
            //restore board
            for (i = 0; i <= 5; i++) {
                posit[i] = backup[i];
            }
            return(false);
        }
        //Expand solution
        solvbot(1);

        //Should now check whether can minimise solution by adding a zero row
        aim = counthnt();
        //save current position
        var backhnt = [];
        for (i = 1; i <= 5; i++) {
            backhnt[i] = hnt[i];
        }

        //get complete push pattern generators
        var invar = [];
        invar[0] = [54, 0, 54, 0, 54];
        invar[1] = [42, 42, 0, 42, 42];
        invar[2] = [28, 42, 54, 42, 28];

        //run through all non-zero combinations of the push patterns.
        for (c = 0; c <= 2; c++) {
            //check combination c; each bit indicates one of the final rows to add
            for (i = 1; i <= 5; i++) {
                hnt[i] = backhnt[i] ^ invar[c][i - 1];
            }
            //check if found better solution
            j = counthnt();
            //alert("aim="+aim+" new="+j+"\nold="+backhnt+"\nhnt="+hnt);
            if (j < aim) {
                for (i = 1; i <= 5; i++) {
                    backhnt[i] = hnt[i];
                }
                aim = j;
            }
        }
        //restore hnt
        for (i = 1; i <= 5; i++) {
            hnt[i] = backhnt[i];
        }

        //restore board
        for (i = 1; i <= 5; i++) {
            posit[i] = backup[i];
        }
        return(true);
    }


    //used to quickly count number of bits set.
    var qcnt = [0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4,
        1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5];

    function counthnt() {
        //count number of buttons pressed, i.e. number of bits set in hnt.
        var c = 0;
        for (var i = 1; i <= 5; i++) {
            c += qcnt[hnt[i] >> 1] + qcnt[hnt[i] >> 6];
        }
        return(c);
    }

    function solveAllPuzzles() {

        initbrd();

        var level;
        var s = "var solve = [];\r\n";
        for (level=1; level<=100; level++) {
            initpuz(level);
            hintson();
            var flattened = flattenedHints(hnt);

            s += "solve[" + (level-1) + "] = [";
            for (var i=0; i<flattened.length; i++) {
                s += "" + coordsToIndex( { col:flattened[i].x-1, row:flattened[i].y-1 });
                if (i < flattened.length-1) {
                    s+= ", ";
                }
            }
            s += "];\r\n";
        }
        console.log(s);
    }

    solveAllPuzzles();
